#include "MazeGameAlgorithms.h"
#include "GameState.h"
#include "queue"
#include <cmath>
using namespace std;
using namespace gliese;
using namespace MazeGame;

struct nodo{
    const GameState* Accion;
    int nroNodo;
    float hn;
    float gn;
    int nivel;
};

struct vSolucion{
    Action::Type vAccion;
    int padre;
};

 void returnSol( list<Action::Type> & solution,vector <vSolucion> sol,int ind){
    int n=ind;
    while(n>=0){
        solution.push_front(sol.at(n).vAccion);
        n=sol.at(n).padre;
    }
 }

int estadosG=1;

bool bfs (GameSimulator & sim, unsigned int & depth, list<Action::Type> & solution)
{
    int ind=0;
    vector <vSolucion> sol;
    bool found=false;
    queue<nodo> fila;
    const GameState* CurrentState= sim.getCurrentState();
    nodo inicial;
    inicial.Accion= CurrentState;
    sim.addVisited(inicial.Accion);
    inicial.nroNodo= sol.size()-1;
    fila.push(inicial);
    nodo parcial;
    sim.undoUpdate();
    while(!fila.empty() && !found){
        parcial= fila.front();
        fila.pop();
        sim.setState(parcial.Accion);
        if (sim.isGameOver()) {
            if (sim.getGameOverResult() == GameOverRule::WIN) {
                cout << "--- Se gano el juego\n\n";
                cout << "Estados generados  "  << ind << endl;
                returnSol(solution,sol,ind);
                found =true;
            } else {
                cout << "--- Se perdio el juego\n\n";
                found= false;
                }
        }else {
            cout << "--- Se agrega el estado nuevo\n\n";
            cout << "---- Detalle de la configuracion del estado actual:\n";
            cout << parcial.Accion->toString() << "\n";
            ComponentPtr<LogicObject> explorer(sim.getGame()->getObject(EXPLORER));
            list<Action::Type> explorerActions;
            explorer->getActions(explorerActions);
            list<Action::Type>::iterator action = explorerActions.begin();
            while ( action != explorerActions.end()) {
                if (explorer->canPerform(*action)) {
                    cout << "--- Se ejecutara la accion:  " << action->toString() << "\n\n";
                    explorer->performAction(*action);
                    vSolucion vParcial;
                    vParcial.vAccion= *action;
                    vParcial.padre=parcial.nroNodo;
                    sol.push_back(vParcial);
                    sim.update();
                    cout << "--- Se actualizo el estado\n\n";
                    if (sim.getGameOverResult() == GameOverRule::WIN){
                        ind=sol.size()-1;
                    }
                    const GameState * currentStat = sim.getCurrentState();
                    if ( !sim.getVisited(currentStat)){
                        sim.addVisited(currentStat);
                        nodo sig;
                        sig.Accion= currentStat;
                        sig.nroNodo=sol.size()-1;
                        fila.push(sig);
                    }
                    else{
                        cout << "--- El estado ya fue visitado\n\n";
                        found= false;}
                    sim.undoUpdate();
                }
                action++;
            }
        }
    }
    return found;
}



bool dfs (GameSimulator & sim, unsigned int & depth, list<Action::Type> & solution)
{
    if (sim.isGameOver()) {
        if (sim.getGameOverResult() == GameOverRule::WIN) {
            cout << "--- Se gano el juego\n\n";
            cout << "Cantidad de estados genrados  "  << estadosG << endl;
            return true;
        } else {
            cout << "--- Se perdio el juego\n\n";
            return false;
        }
    } else if (solution.size() == depth) {
        cout << "--- PODA: se alcanzo la longitud maxima de la solucion\n\n";
        return false;
    } else {
        const GameState * currentState = sim.getCurrentState();
        //if (sim.getVisited(currentState) == 0) {
        if (!sim.isInPath()) {
            cout << "--- Se agrega el estado nuevo\n\n";
            //sim.addVisited(currentState);

            cout << "---- Detalle de la configuracion del estado actual:\n";
            cout << currentState->toString() << "\n";

            ComponentPtr<LogicObject> explorer(sim.getGame()->getObject(EXPLORER));

            list<Action::Type> explorerActions;
            explorer->getActions(explorerActions);

            bool found = false;
            list<Action::Type>::iterator action = explorerActions.begin();
            while (!found && (action != explorerActions.end())) {
                if (explorer->canPerform(*action)) {
                    cout << "--- Se ejecutara la accion:  " << action->toString() << "\n\n";
                    solution.push_back(*action);

                    explorer->performAction(*action);
                    sim.update();
                    cout << "--- Se actualizo el estado\n\n";
                    found = dfs(sim, depth, solution);
                    if (!found) {
                        cout << "--- Se vuelve al estado anterior\n\n";
                        solution.pop_back();
                        sim.undoUpdate();
                    }
                }
                action++;
            }
            return found;
        } else {
            cout << "--- El estado ya fue visitado\n\n";
            return false;
        }
    }
}

int distE(int x1,int y1,int x2,int y2){
    return sqrt(pow(x1-x2, 2.0)+ pow(y1-y2,2.0));
}

class Heuristic
{
public:
	virtual ~Heuristic() {}
    virtual float eval(Game * game) const = 0;
};

class Heuristic1 : public Heuristic
{
public:
    float eval(Game * game) const {
        list<LogicObject*> enemiesM;
        list<LogicObject*> enemiesS;
        game->getObjects(MUMMY,enemiesM);
        game->getObjects(SCORPION,enemiesS);
        enemiesM.insert(enemiesM.end(),enemiesS.begin(),enemiesS.end());
        ComponentPtr<LogicObject> explorer(game->getObject(EXPLORER));
        ComponentPtr<LogicObject> goal(game->getObject(GOAL));
        int c,d,e,f,g,h,i,j;
        float dSalida;
        int a=explorer->getShape()->getX();
        int b=explorer->getShape()->getY();
        i=goal->getShape()->getX();
        j=goal->getShape()->getY();
        dSalida=distE(a,b,i,j);
        list<LogicObject*>::iterator it=enemiesM.begin();
        bool es_momia1= false;bool es_momia2= false;bool es_escorpion= false;
        while (it!= enemiesM.end( )){
            if (((*it)->getType()== MUMMY) && (!es_momia1)) {
                es_momia1=true;
                LogicObject* momia1;
                momia1=(*it);
                c=momia1->getShape()->getX();
                d=momia1->getShape()->getY();
                }else {
                    if (((*it)->getType()== MUMMY) && (es_momia1)){
                        es_momia2= true;
                        LogicObject* momia2;
                        momia2=(*it);
                        e=momia2->getShape()->getX();
                        f=momia2->getShape()->getY();
                    }else{
                        es_escorpion= true;
                        LogicObject* escorpion;
                        escorpion=(*it);
                        g=escorpion->getShape()->getX();
                        h=escorpion->getShape()->getY();
                    }
                }
            it++;
        }
        float distancia;
        if ( a==i&&b==j ){
            return 0;
         }else{
            if (es_momia1 && es_momia2){
                distancia=distE(e,f,c,d)*6;
                return (distancia+dSalida);
            }else{
                if (es_momia1 && es_escorpion){
                    distancia=distE(c,d,g,h)*6;
                    return (distancia+dSalida);
                }else{
                    distancia=distE(a,b,c,d);
                    return dSalida/(distancia+1);
                }

                }
            }
        }
};

int distM(int x1,int y1,int x2, int y2){
    return abs(x2-x1)+abs(y2-y1);
}

class Heuristic2 : public Heuristic
{
public:
    float eval(Game * game ) const {
    ComponentPtr<LogicObject> explorer(game->getObject(EXPLORER));
    ComponentPtr<LogicObject> goal(game->getObject(GOAL));
    int a=explorer->getShape()->getX();
    int b=explorer->getShape()->getY();
    int e=goal->getShape()->getX();
    int i=goal->getShape()->getY();
    int j=distE(a,b,e,i);
    list<LogicObject*> enemiesM;
    list<LogicObject*> enemiesS;
    game->getObjects(MUMMY,enemiesM);
    game->getObjects(SCORPION,enemiesS);
    enemiesM.insert(enemiesM.end(),enemiesS.begin(),enemiesS.end());
    list<LogicObject*>::iterator it=enemiesM.begin();
    bool es_momia1= false;bool es_momia2= false;bool es_escorpion= false;
    int m1x,m1y,m2x,m2y,sx,sy;
    while (it!= enemiesM.end( )){
        if (((*it)->getType()== MUMMY) && (!es_momia1)) {
            es_momia1=true;
            LogicObject* momia1;
            momia1=(*it);
            m1x=momia1->getShape()->getX();
            m1y=momia1->getShape()->getY();
            }else {
                if (((*it)->getType()== MUMMY) && (es_momia1)){
                    es_momia2= true;
                    LogicObject* momia2;
                    momia2=(*it);
                    m2x=momia2->getShape()->getX();
                    m2y=momia2->getShape()->getY();
                }else{
                    es_escorpion= true;
                    LogicObject* escorpion;
                    escorpion=(*it);
                    sx=escorpion->getShape()->getX();
                    sy=escorpion->getShape()->getY();
                   }
            }
        it++;
    }
    int costoEnemigo=0;
    int d1,d2;
    if (es_momia1 && es_momia2){
        d1=distM(m1x,m1y,a,b);
        d2=distM(m2x,m2y,a,b);
        if ( m1x == 0 || m1x == 5 || m1y == 0 || m1y == 5){
            costoEnemigo=d1*3;
        }
        if( m2x == 0 || m2x == 5 || m2y == 0 || m2y == 5){
            costoEnemigo+=d2*3;
        }else{
            costoEnemigo=abs(d1-d2)*3;
            }
    }else{
        if (es_momia1 && es_escorpion){
            d1=distM(m1x,m1y,a,b);
            d2=distM(sx,sy,a,b);
            if ( m1x == 0 || m1x == 5 || m1y == 0 || m1y == 5)
                costoEnemigo+=d1*3;
            if ( sx == 0 || sx == 5 || sy == 0 || sy == 5){
                costoEnemigo+=d2*3;
            }else{
                costoEnemigo+= abs(d1-d2)*3;
            }
        }else{
            d1=distM(m1x,m1y,a,b);
            if ( m1x == 0 || m1x == 5 || m1y == 0 || m1y == 5 ){
                costoEnemigo=d1*6;
            }else{
                //hay una sola maomia y ademas no esta en el borde
                costoEnemigo+=d1;
            }
        }
    }
    ///Cantidad de movimentos que puede hacer la momia
    if ( a==e && b==i ){
        return 0;
    }else{
        //costo enemigo, cuanto mas grande es, mas peligroso es ir por ahi
        if ( a==0 || a==5 || b==0 || b==5){
            return j+costoEnemigo;
        }else{
            //cout << " cantidad de enemigos  " << enemiesM.size() <<  endl ;
            return j*enemiesM.size()*3;
        }
    }
    }

};

class Heuristic3 : public Heuristic
{
public:
    float eval(Game * game) const {
    ComponentPtr<LogicObject> explorer(game->getObject(EXPLORER));
    int a=explorer->getShape()->getX();
    int b=explorer->getShape()->getY();
    Rectangle  area(a,b,1,1);
    list<LogicObject*>  objects;
    game->getGameSpace().getObjects(area,objects);
    list<LogicObject*>::iterator it=objects.begin();
    float c=0;
    int murosposibles=3;
    while ( it !=objects.end( )){
        if ( (*it)->getType() == UPWALL){
            c++;
        }else{
            if ( (*it)->getType() == DOWNWALL){
            c++;
            }else{
            if ( (*it)->getType() == LEFTWALL ){
                c++;
            }else{
                if ((*it)->getType() == RIGHTWALL){
                    c++;
                }
            }
            }
        }
        it++;
    }
    if ( c == 0 ){
        return ((c+1)/murosposibles);
    }
    if ( c == 1 ){
        return c*(murosposibles-1);

    }
    if ( c == 2 ){
        return c*murosposibles;
    }
    if ( c == 3 ){
        return c*(murosposibles+1);
    }
    }
};

bool operator< (const nodo& a, const nodo &b){
   if ( a.gn+a.hn != b.gn+b.hn){
        return ( a.gn+a.hn ) > (b.gn+b.hn);
   }else{
        if ( a.hn > b.hn ){
            return ( a.gn+a.hn ) > (b.gn+b.hn);
        }else{
            return ( a.gn+a.hn ) < (b.gn+b.hn);
        }
   }
}

bool operator> (const nodo& a, const nodo & b){
    if ( a.gn+a.hn != b.gn+b.hn){
        return ( a.gn+a.hn ) < (b.gn+b.hn);
    }else{
        if ( a.hn < b.hn ){
            return ( a.gn+a.hn ) < (b.gn+b.hn);
        }else{
            return ( a.gn+a.hn ) > (b.gn+b.hn);
        }

    }
}

bool astar(GameSimulator & sim, const Heuristic & h, list<Action::Type> & solution)
{
    int ind=0;
    vector <vSolucion> sol;
    bool found;
    found= false;
    priority_queue<nodo, vector<nodo>,less<vector<nodo>::value_type> > fila;
    const GameState* CurrentState= sim.getCurrentState();
    nodo inicial;
    inicial.Accion= CurrentState;
    inicial.nroNodo=sol.size()-1;
    inicial.nivel=1;
    fila.push(inicial);
    nodo parcial;
    sim.undoUpdate();
    int g=0;
    while(!found){
        parcial= fila.top();
        fila.pop();
        sim.setState(parcial.Accion);
        if (sim.isGameOver()) {
            if (sim.getGameOverResult() == GameOverRule::WIN) {
                cout << "--- Se gano el juego\n\n";
                returnSol(solution,sol,ind);
                found =true;
            } else {
                found= false;
                }
        }else {
            cout << "--- Se agrega el estado nuevo\n\n";
            cout << "---- Detalle de la configuracion del estado actual:\n";
            cout << parcial.Accion->toString() << "\n";
            ComponentPtr<LogicObject> explorer(sim.getGame()->getObject(EXPLORER));
            list<Action::Type> explorerActions;
            explorer->getActions(explorerActions);
            list<Action::Type>::iterator action = explorerActions.begin();
            while ( action != explorerActions.end()) {
                estadosG++;
                if (explorer->canPerform(*action)) {
                    cout << "--- Se ejecutara la accion:  " << action->toString() << "\n\n";
                    explorer->performAction(*action);
                    vSolucion vParcial;
                    vParcial.vAccion= *action;
                    vParcial.padre=parcial.nroNodo;
                    sol.push_back(vParcial);
                    sim.update();
                    cout << "--- Se actualizo el estado\n\n";
                    if (sim.getGameOverResult() == GameOverRule::WIN){
                        ind=sol.size()-1;
                    }
                    const GameState * currentStat = sim.getCurrentState();
                    if ( !sim.getVisited(currentStat)){
                        sim.addVisited(currentStat);
                        nodo sig;
                        sig.Accion= currentStat;
                        sig.nroNodo=sol.size()-1;
                        Game* A;
                        A=sim.getGame();
                        sig.nivel=parcial.nivel+1;
                        sig.hn=h.eval(A);
                        sig.gn=sig.nivel;
                        cout << "funcion F(n)   "<< sig.hn+sig.gn << endl;
                        fila.push(sig);
                    }
                    else{
                        cout << "--- El estado ya fue visitado\n\n";
                        found= false;}
                    sim.undoUpdate();
                }
                action++;
            }
        }
    }
    cout << "Estados Generados   "<< estadosG<< endl;
    return found;
}


bool astar1(GameSimulator & sim, unsigned int & depth, list<Action::Type> & solution)
{
    return astar(sim, Heuristic1(), solution);
}

bool astar2(GameSimulator & sim, unsigned int & depth, list<Action::Type> & solution)
{
    return astar(sim, Heuristic2(), solution);
}

bool astar3(GameSimulator & sim, unsigned int & depth, list<Action::Type> & solution)
{
    return astar(sim, Heuristic3(), solution);
}
